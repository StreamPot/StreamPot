services:
  # web:
  #   image: traefik:2.11
  #   command: --providers.docker --entrypoints.web.address=:80 --providers.docker.exposedbydefault=false
  #   ports:
  #     # The HTTP port
  #     - "80:80"
  #   volumes:
  #     # So that Traefik can listen to the Docker events
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   depends_on:
  #     - server
  server:
    build:
      context: .
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.go.rule=Path(`/`)"
    #   - "traefik.http.services.go.loadbalancer.server.port=80"
    environment:
      NODE_ENV: production
      PG_CONNECTION_STRING: postgres://postgres:example@db:5432/example
      REDIS_CONNECTION_STRING: redis://redis:6379
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_REGION: ${S3_REGION}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      S3_ENDPOINT: ${S3_ENDPOINT}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
  db:
    image: postgres:16
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD=example
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redislabs/redismod
    ports:
      - '6379:6379'
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
volumes:
  db-data:

